@model APPBASE.Models.SkhstudentVM
@using APPBASE.Helpers

@{string vsErrClass = "";}
@{string vsDisableButton = "";}
@{Boolean isShowDropdown = true;}
@{string vsReadonlyTextboxKey = "Readonly";}
@{string vsReadonlyTextbox = "";}
@if (ViewBag.CRUD_type == hlpFlags_CRUDOption.CREATE) { vsReadonlyTextboxKey = ""; }
@if ((ViewBag.CRUD_type == hlpFlags_CRUDOption.VIEW) || (ViewBag.CRUD_type == hlpFlags_CRUDOption.DELETE)) { vsDisableButton = "disabled"; vsReadonlyTextbox = "Readonly"; isShowDropdown = false; }
@{string vsDateFormat = "'alias': 'dd/mm/yyyy'";}

<table>
    <thead>
        <tr>
            <th colspan="7">Evaluasi harian</th>
        </tr>
    </thead>

    <tbody>
        <tr>
            <td>
                <div class="row">
                    @Html.HiddenFor(model => model.DETAIL.RATEA_ID, new { id = "RATEA_ID" })
                    <div class="col-xs-12">
                        @if (ViewData.ModelState["RATEA_ID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
                        <div class="form-group @vsErrClass">
                            <label for="RATEA_DESC">A</label>


                            <div class="input-group input-group-sm">
                                <input type="text" id="RATEA_DESC" name="DETAIL.RATEA_DESC" value="@Html.DisplayFor(model => model.DETAIL.RATEA_DESC)" class="form-control" readonly />
                                <span class="input-group-btn">
                                    <button type="button" id="cmdLookupRATEA_ID" name="DETAIL.cmdLookupRATEA_ID" class="btn btn-info btn-flat" data-toggle="modal" data-target="#DialogLookup" @vsDisableButton><i class="fa fa-search"></i></button>
                                </span>
                            </div><!-- /input-group -->

            
                            @if (ViewData.ModelState["RATEA_ID1"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATEA_ID1")
                                    </label>
                            }
                            @if (ViewData.ModelState["RATEA_ID2"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATEA_ID2")
                                    </label>
                            }
                        </div> <!-- /.form-group -->
                    </div> <!-- /.col-xs-12 -->
                </div><!-- /.row -->
            </td> <!-- /TD -->

            <td>
                <div class="row">
                    @Html.HiddenFor(model => model.DETAIL.RATESE_ID, new { id = "RATESE_ID" })
                    <div class="col-xs-12">
                        @if (ViewData.ModelState["RATESE_ID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
                        <div class="form-group @vsErrClass">
                            <label for="RATESE_DESC">SE</label>


                            <div class="input-group input-group-sm">
                                <input type="text" id="RATESE_DESC" name="DETAIL.RATESE_DESC" value="@Html.DisplayFor(model => model.DETAIL.RATESE_DESC)" class="form-control" readonly />
                                <span class="input-group-btn">
                                    <button type="button" id="cmdLookupRATESE_ID" name="DETAIL.cmdLookupRATESE_ID" class="btn btn-info btn-flat" data-toggle="modal" data-target="#DialogLookup" @vsDisableButton><i class="fa fa-search"></i></button>
                                </span>
                            </div><!-- /input-group -->

            
                            @if (ViewData.ModelState["RATESE_ID1"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATESE_ID1")
                                    </label>
                            }
                            @if (ViewData.ModelState["RATESE_ID2"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATESE_ID2")
                                    </label>
                            }
                        </div> <!-- /.form-group -->
                    </div> <!-- /.col-xs-12 -->
                </div><!-- /.row -->
            </td> <!-- /TD -->

            <td>
                <div class="row">
                    @Html.HiddenFor(model => model.DETAIL.RATEB_ID, new { id = "RATEB_ID" })
                    <div class="col-xs-12">
                        @if (ViewData.ModelState["RATEB_ID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
                        <div class="form-group @vsErrClass">
                            <label for="RATEB_DESC">B</label>


                            <div class="input-group input-group-sm">
                                <input type="text" id="RATEB_DESC" name="DETAIL.RATEB_DESC" value="@Html.DisplayFor(model => model.DETAIL.RATEB_DESC)" class="form-control" readonly />
                                <span class="input-group-btn">
                                    <button type="button" id="cmdLookupRATEB_ID" name="DETAIL.cmdLookupRATEB_ID" class="btn btn-info btn-flat" data-toggle="modal" data-target="#DialogLookup" @vsDisableButton><i class="fa fa-search"></i></button>
                                </span>
                            </div><!-- /input-group -->

            
                            @if (ViewData.ModelState["RATEB_ID1"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATEB_ID1")
                                    </label>
                            }
                            @if (ViewData.ModelState["RATEB_ID2"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATEB_ID2")
                                    </label>
                            }
                        </div> <!-- /.form-group -->
                    </div> <!-- /.col-xs-12 -->
                </div><!-- /.row -->
            </td> <!-- /TD -->

        </tr> <!-- /TR -->

        <tr>
            <td>
                <div class="row">
                    @Html.HiddenFor(model => model.DETAIL.RATEK_ID, new { id = "RATEK_ID" })
                    <div class="col-xs-12">
                        @if (ViewData.ModelState["RATEK_ID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
                        <div class="form-group @vsErrClass">
                            <label for="RATEK_DESC">K</label>


                            <div class="input-group input-group-sm">
                                <input type="text" id="RATEK_DESC" name="DETAIL.RATEK_DESC" value="@Html.DisplayFor(model => model.DETAIL.RATEK_DESC)" class="form-control" readonly />
                                <span class="input-group-btn">
                                    <button type="button" id="cmdLookupRATEK_ID" name="DETAIL.cmdLookupRATEK_ID" class="btn btn-info btn-flat" data-toggle="modal" data-target="#DialogLookup" @vsDisableButton><i class="fa fa-search"></i></button>
                                </span>
                            </div><!-- /input-group -->

            
                            @if (ViewData.ModelState["RATEK_ID1"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATEK_ID1")
                                    </label>
                            }
                            @if (ViewData.ModelState["RATEK_ID2"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATEK_ID2")
                                    </label>
                            }
                        </div> <!-- /.form-group -->
                    </div> <!-- /.col-xs-12 -->
                </div><!-- /.row -->
            </td> <!-- /TD -->

            <td>
                <div class="row">
                    @Html.HiddenFor(model => model.DETAIL.RATEMH_ID, new { id = "RATEMH_ID" })
                    <div class="col-xs-12">
                        @if (ViewData.ModelState["RATEMH_ID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
                        <div class="form-group @vsErrClass">
                            <label for="RATEMH_DESC">MH</label>


                            <div class="input-group input-group-sm">
                                <input type="text" id="RATEMH_DESC" name="DETAIL.RATEMH_DESC" value="@Html.DisplayFor(model => model.DETAIL.RATEMH_DESC)" class="form-control" readonly />
                                <span class="input-group-btn">
                                    <button type="button" id="cmdLookupRATEMH_ID" name="DETAIL.cmdLookupRATEMH_ID" class="btn btn-info btn-flat" data-toggle="modal" data-target="#DialogLookup" @vsDisableButton><i class="fa fa-search"></i></button>
                                </span>
                            </div><!-- /input-group -->

            
                            @if (ViewData.ModelState["RATEMH_ID1"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATEMH_ID1")
                                    </label>
                            }
                            @if (ViewData.ModelState["RATEMH_ID2"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATEMH_ID2")
                                    </label>
                            }
                        </div> <!-- /.form-group -->
                    </div> <!-- /.col-xs-12 -->
                </div><!-- /.row -->
            </td> <!-- /TD -->

            <td>
                <div class="row">
                    @Html.HiddenFor(model => model.DETAIL.RATEMK_ID, new { id = "RATEMK_ID" })
                    <div class="col-xs-12">
                        @if (ViewData.ModelState["RATEMK_ID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
                        <div class="form-group @vsErrClass">
                            <label for="RATEMK_DESC">MK</label>


                            <div class="input-group input-group-sm">
                                <input type="text" id="RATEMK_DESC" name="DETAIL.RATEMK_DESC" value="@Html.DisplayFor(model => model.DETAIL.RATEMK_DESC)" class="form-control" readonly />
                                <span class="input-group-btn">
                                    <button type="button" id="cmdLookupRATEMK_ID" name="DETAIL.cmdLookupRATEMK_ID" class="btn btn-info btn-flat" data-toggle="modal" data-target="#DialogLookup" @vsDisableButton><i class="fa fa-search"></i></button>
                                </span>
                            </div><!-- /input-group -->

            
                            @if (ViewData.ModelState["RATEMK_ID1"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATEMK_ID1")
                                    </label>
                            }
                            @if (ViewData.ModelState["RATEMK_ID2"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATEMK_ID2")
                                    </label>
                            }
                        </div> <!-- /.form-group -->
                    </div> <!-- /.col-xs-12 -->
                </div><!-- /.row -->
            </td> <!-- /TD -->

            <td>
                <div class="row">
                    @Html.HiddenFor(model => model.DETAIL.RATES_ID, new { id = "RATES_ID" })
                    <div class="col-xs-12">
                        @if (ViewData.ModelState["RATES_ID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
                        <div class="form-group @vsErrClass">
                            <label for="RATES_DESC">S</label>


                            <div class="input-group input-group-sm">
                                <input type="text" id="RATES_DESC" name="DETAIL.RATES_DESC" value="@Html.DisplayFor(model => model.DETAIL.RATES_DESC)" class="form-control" readonly />
                                <span class="input-group-btn">
                                    <button type="button" id="cmdLookupRATES_ID" name="DETAIL.cmdLookupRATES_ID" class="btn btn-info btn-flat" data-toggle="modal" data-target="#DialogLookup" @vsDisableButton><i class="fa fa-search"></i></button>
                                </span>
                            </div><!-- /input-group -->

            
                            @if (ViewData.ModelState["RATES_ID1"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATES_ID1")
                                    </label>
                            }
                            @if (ViewData.ModelState["RATES_ID2"] != null)
                            {
                                    <label class="control-label" for="inputError">
                                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RATES_ID2")
                                    </label>
                            }
                        </div> <!-- /.form-group -->
                    </div> <!-- /.col-xs-12 -->
                </div><!-- /.row -->
            </td> <!-- /TD -->
        </tr> <!-- /TR -->
    </tbody>
</table>

<div class="row">
    <div class="col-xs-12">
        @if (ViewData.ModelState["RESULT_DESC0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
        <div class="form-group @vsErrClass">
            <label for="RESULT_DESC">Keterangan</label>
            <textarea id="RESULT_DESC" name="DETAIL.RESULT_DESC" class="form-control" maxlength="50" @vsReadonlyTextbox>@Html.DisplayFor(model => model.DETAIL.RESULT_DESC)</textarea>


            @if (ViewData.ModelState["RESULT_DESC1"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RESULT_DESC1")
                    </label>
            }
            @if (ViewData.ModelState["RESULT_DESC2"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("RESULT_DESC2")
                    </label>
            }
        </div> <!-- /.form-group -->
    </div> <!-- /.col-xs-12 -->
</div><!-- /.row -->
